#include <iostream>
using namespace std;



#pragma region convertToBinary
    void convertToBinary(unsigned long long n) {
        if (n / 2 != 0) {
            convertToBinary(n / 2);
        }
        printf("%d", n % 2);
    }
#pragma endregion

#pragma region Permutation Choice1

unsigned long long permutationCh1(unsigned long long in) {

    unsigned long long out = 0;

    int pc1[56] = { 57,49,41,33,25,17,9
                  ,1,58,50,42,34,26,18
                  ,10,2,59,51,43,35,27
                  ,19,11,3,60,52,44,36
                  ,63,55,47,39,31,23,15
                  ,7,62,54,46,38,30,22
                  ,14,6,61,53,45,37,29
                  ,21,13,5,28,20,12,4 };

    unsigned long long mask = 0b1000000000000000000000000000000000000000000000000000000000000000;

    for (int j = 0; j < 56; j++)
    {
        unsigned long long mask1 = mask >> (pc1[j] - 1); //mask to retrive the corresponding bit from input
        unsigned long long mask2 = in & mask1;//retrive the corresponding bit from input
        unsigned long long mask3;
        if (pc1[j] > (j + 1)) { mask3 = mask2 << (pc1[j] - (j + 1)); } //move to the bit we need to update it
        else { mask3 = mask2 >> ((j + 1) - pc1[j]); }

        out = out | mask3;

        convertToBinary(out);
        cout << endl << endl;
    }

    out = out >> 8; // make it 56bits only
    return out;
}

#pragma endregion

#pragma region permutation Choice2
    unsigned long long permutationCh2(unsigned long long in) {

        unsigned long long out = 0;

        int pc2[48] = {14,17,11,24,1,5
                      ,3,28,15,6,21,10
                      ,23,19,12,4,26,8
                      ,16,7,27,20,13,2
                      ,41,52,31,37,47,55
                      ,30,40,51,45,33,48
                      ,44,49,39,56,34,53
                      ,46,42,50,36,29,32};

        unsigned long long mask = 0b0000000010000000000000000000000000000000000000000000000000000000;

        for (int j = 0; j < 48; j++)
        {
            unsigned long long mask1 = mask >> (pc2[j] - 1); //mask to retrive the corresponding bit from input
            unsigned long long mask2 = in & mask1;//retrive the corresponding bit from input
            unsigned long long mask3;
            if (pc2[j] > (j + 1)) { mask3 = mask2 << (pc2[j] - (j + 1)); } //move to the bit we need to update it
            else { mask3 = mask2 >> ((j + 1) - pc2[j]); }

            out = out | mask3;

            convertToBinary(out);
            cout << endl << endl;
        }

        out = out >> 8; // make it 48bits only
        return out;

    }

#pragma endregion

#pragma region permutation
    unsigned long long permutation(unsigned long long in) {

        unsigned long long out = 0;

        int pc2[32] = { 16,7,20,21
                      ,29,12,28,17
                      ,1,15,23,26
                      ,5,18,31,10
                      ,2,8,24,14
                      ,32,27,3,9
                      ,19,13,30,6
                      ,22,11,4,25};

        unsigned long long mask = 0b0000000000000000000000000000000010000000000000000000000000000000;

        for (int j = 0; j < 32; j++)
        {
            unsigned long long mask1 = mask >> (pc2[j] - 1); //mask to retrive the corresponding bit from input
            unsigned long long mask2 = in & mask1;//retrive the corresponding bit from input
            unsigned long long mask3;
            if (pc2[j] > (j + 1)) { mask3 = mask2 << (pc2[j] - (j + 1)); } //move to the bit we need to update it
            else { mask3 = mask2 >> ((j + 1) - pc2[j]); }

            out = out | mask3;

            convertToBinary(out);
            cout << endl << endl;
        }
        
        return out;

    }

#pragma endregion


int main()
{
    //Tested examples

    unsigned long long noin;
    unsigned long long noout;

    noin = 0b0011010000101101101101011010100000011101110110111001000000000100;
    noout=permutationCh1(noin);
    convertToBinary(noout);

    
    
    noin = 0b11011000010000000001111011100100000100101110011101001010;
    noout = permutationCh2(noin);
    convertToBinary(noout);
    

    noin = 0b00010010111001110100101000000000;
    noout = permutation(noin);
    convertToBinary(noout);

}

